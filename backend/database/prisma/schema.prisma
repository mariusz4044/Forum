generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  login             String     @unique
  password          String
  name              String     @unique
  role              String     @default("USER")
  avatar            String     @default("default.webp")
  createdAt         DateTime   @default(now())
  points            Int        @default(0)
  addressIp         String?
  bansReceived      Ban[]      @relation("BannedUser")
  bansGiven         Ban[]      @relation("BannedByUser")
  lastPostTs        DateTime   @default(dbgenerated("'1970-01-01 00:00:00'"))
  reputation        Int        @default(0)
  sessions          Session[]
  sections          Section[]
  topicsCreated     Topic[]
  categoriesCreated Category[]
  posts             Post[]
  rateGiven         Rate[]

  @@index([id, login])
}

model Ban {
  id           Int      @id @default(autoincrement())
  endTime      DateTime
  startTime    DateTime @default(now())
  reason       String
  bannedUserId Int
  banned       User     @relation("BannedUser", fields: [bannedUserId], references: [id])
  bannedById   Int
  bannedBy     User     @relation("BannedByUser", fields: [bannedById], references: [id])

  @@index([bannedUserId, endTime])
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([userId, expiresAt])
}

model Section {
  id          Int        @id @default(autoincrement())
  title       String
  createdAt   DateTime   @default(now())
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id])
  categories  Category[]

  @@index([id])
}

model Category {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  topics      Topic[]
  Section     Section? @relation(fields: [sectionId], references: [id])
  sectionId   Int?
  lastPostId  Int?
  lastPost    Post?    @relation(fields: [lastPostId], references: [id])

  @@index([id, sectionId])
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String
  createdAt   DateTime  @default(now())
  createdById Int
  createdBy   User      @relation(fields: [createdById], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int
  posts       Post[]

  @@index([id, categoryId])
}

model Post {
  id            Int        @id @default(autoincrement())
  message       String
  authorId      Int
  createdAt     DateTime   @default(now())
  author        User       @relation(fields: [authorId], references: [id])
  topicId       Int
  topic         Topic      @relation(fields: [topicId], references: [id])
  category      Category[]
  ratings       Rate[]
  ratingSummary Int        @default(0)

  @@index([id, authorId])
}

model Rate {
  id     Int @id @default(autoincrement())
  status Int //rate -1 or 1

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  post   Post? @relation(fields: [postId], references: [id])
  postId Int?

  @@index([id, authorId])
}
